<mt-header class="my-header-danger" title="预约学车">
    <mt-button slot="left" icon="back" @@click="goBack()">返回</mt-button>
    <span slot="right">{{Location.City}}</span>
</mt-header>

<div class="my-title">
    <h2>请填写预约信息</h2>
</div>

<div class="my-form">
    <mt-field label="预约科目" placeholder="选择科目" v-model="Model.Course" :readonly="true" :class="getValidClass(Model.Course)">
        <mt-button icon="more" @@click="CoursePickerVisible=true" type="danger"></mt-button>
    </mt-field>
    <mt-field label="预约场地" placeholder="选择场地" v-model="Model.Ground" :readonly="true" :class="getValidClass(Model.Ground)">
        <mt-button icon="more" @@click="GroundPickerVisible=true" type="danger"></mt-button>
    </mt-field>
    <mt-field label="预约教练" placeholder="选择教练" v-model="Model.Coach" :readonly="true" :class="getValidClass(Model.Coach)">
        <mt-button icon="more" @@click="CoachPickerVisible=true" type="danger"></mt-button>
    </mt-field>
    <mt-field label="预约时间" placeholder="选择时间" v-model="Model.TeachTime" :readonly="true" :class="getValidClass(Model.TeachTime)">
        <mt-button icon="more" @@click="TeachTimePickerVisible=true" type="danger"></mt-button>
    </mt-field>
    <mt-field label="验证码" placeholder="验证码" v-model="Model.Code" :class="getValidClass(Model.Code, 'isVerifyCode')">
        <img class="my-mob-verifycode" v-bind:src="VerifyCodeUrl" @@click="resetVerifyCode()" />
    </mt-field>
</div>

<div class="my-submit">
    <mt-button type="danger" @@click="submit()">立即预约</mt-button>
</div>

<mt-popup v-model="CoursePickerVisible"
          class="my-mint-popup"
          popup-transition="popup-fade">
    <div class="my-popup-button">
        <mt-button type="danger" @@click="CoursePickerVisible=false">确定</mt-button>
    </div>
    <mt-picker :slots="CourseSlots"
               value-key="Name"
               @@change="onCourseChange">
    </mt-picker>
</mt-popup>

<mt-popup v-model="GroundPickerVisible"
          class="my-mint-popup"
          popup-transition="popup-fade">
    <div class="my-popup-button">
        <mt-button type="danger" @@click="GroundPickerVisible=false">确定</mt-button>
    </div>
    <mt-picker :slots="GroundSlots"
               value-key="Name"
               @@change="onGroundChange">
    </mt-picker>
</mt-popup>

<mt-popup v-model="CoachPickerVisible"
          class="my-mint-popup"
          popup-transition="popup-fade">
    <div class="my-popup-button">
        <mt-button type="danger" @@click="CoachPickerVisible=false">确定</mt-button>
    </div>
    <mt-picker :slots="CoachSlots"
               value-key="Name"
               @@change="onCoachChange">
    </mt-picker>
</mt-popup>

<mt-datetime-picker type="date"
                    ref="teachtimepicker"
                    :start-date="MinDate"
                    :end-date="MaxDate"
                    year-format="{value}年"
                    month-format="{value}月"
                    date-format="{value}日"
                    @@confirm="onTeachTimeChange">
</mt-datetime-picker>

@section js{
    <script>
    function getVueOptions() {
        return helper.getVueModelOptions({
            data: {
                CoursePickerVisible: false,
                GroundPickerVisible: false,
                CoachPickerVisible: false,
                TeachTimePickerVisible: false,
                CourseSlots: [],
                GroundSlots: [],
                CoachSlots: [],
                MinDate: null,
                MaxDate: null,
                VerifyCodeUrl: "",
                Model: {
                    CourseId: null,
                    Course: null,
                    GroundId: null,
                    Ground: null,
                    CoachId: null,
                    Coach: null,
                    TeachTime: null,
                    Code: null
                }
            },
            watch:{
                "TeachTimePickerVisible": function (val) {
                    var timePicker = this.$refs.teachtimepicker;
                    val ? timePicker.open() : timePicker.close();
                }
            },
            methods: {
                initPage: function () {
                    var _this = this;
                    _this.resetVerifyCode();
                    _this.MinDate = helper.addDays(new Date(), 1);
                    _this.MaxDate = helper.addDays(new Date(), 30);

                    helper.post("/Mob/Home/GetCourseList", helper.default.AllPageParam, function (data) {
                        _this.CourseSlots = _this.getSlots(data.Data);
                        if (data.Data.length > 0) {
                            _this.Model.Course = data.Data[0].Name;
                            _this.Model.CourseId = data.Data[0].Id;
                        }
                    });

                    helper.post("/Mob/Home/GetGroundList", helper.default.AllPageParam, function (data) {
                        _this.GroundSlots = _this.getSlots(data.Data);
                        if (data.Data.length > 0) {
                            _this.Model.Ground = data.Data[0].Name;
                            _this.Model.GroundId = data.Data[0].Id;
                        }
                    });

                    helper.post("/Mob/Home/GetCoachList", helper.default.AllPageParam, function (data) {
                        _this.CoachSlots = _this.getSlots(data.Data);
                        if (data.Data.length > 0) {
                            _this.Model.Coach = data.Data[0].Name;
                            _this.Model.CoachId = data.Data[0].Id;
                        }
                    });
                },
                getSlots: function (data) {
                    return [{
                        flex: 1,
                        values: data || []
                    }];
                },
                onCourseChange: function (picker, values) {
                    if (values.length == 0) {
                        return;
                    }
                    this.Model.Course = values[0].Name;
                    this.Model.CourseId = values[0].Id;
                    //this.CoursePickerVisible = false;
                },
                onGroundChange: function (picker, values) {
                    if (values.length == 0) {
                        return;
                    }
                    this.Model.Ground = values[0].Name;
                    this.Model.GroundId = values[0].Id;
                    //this.GroundPickerVisible = false;
                },
                onCoachChange: function (picker, values) {
                    if (values.length == 0) {
                        return;
                    }
                    this.Model.Coach = values[0].Name;
                    this.Model.CoachId = values[0].Id;
                    //this.CoachPickerVisible = false;
                },
                onTeachTimeChange: function (val) {
                    this.Model.TeachTime = this.getDate(val,'yyyy-MM-dd');
                    this.TeachTimePickerVisible = false;
                },
                getValidClass: function (value, cmd, myclass) {
                    var callback = helper[cmd] || function () { return true; };
                    myclass = myclass || "";
                    if (!helper.isNullOrEmpty(myclass)) {
                        myclass += " ";
                    }
                    myclass += (helper.isNullOrEmpty(value) || !callback(value)) ? "my-invalid-input" : "";
                    return myclass;
                },
                resetVerifyCode: function () {
                    this.VerifyCodeUrl = "/VerifyCode?" + Math.random();
                },
                submit: function () {
                    var _this = this;
                    if (helper.isNullOrEmpty(_this.Model.Course)) {
                        helper.alert("请先选择科目。");
                        return;
                    }
                    if (helper.isNullOrEmpty(_this.Model.Ground)) {
                        helper.alert("请先选择场地。");
                        return;
                    }
                    if (helper.isNullOrEmpty(_this.Model.Coach)) {
                        helper.alert("请先选择教练。");
                        return;
                    }
                    if (helper.isNullOrEmpty(_this.Model.TeachTime)) {
                        helper.alert("请先选择预约时间。");
                        return;
                    }
                    if (helper.isNullOrEmpty(_this.Model.Code)) {
                        helper.alert("请先填验证码。");
                        return;
                    }
                    helper.post("/Mob/Subscribe/Save", this.Model, function (data) {
                        helper.alert("恭喜您预约成功，即将返回到上一页面。", function () {
                            _this.goBack();
                        });
                    });
                }
            }
        });
    }
    </script>
}