@model BindDto
<mt-header class="my-header-danger" title="邦定信息">
    <span slot="right">{{Location.City}}</span>
</mt-header>

<div class="my-title">
    <h2>请先绑定电话</h2>
</div>

<div class="my-wrap my-user-wrap">
    <mt-cell>
        <img class="my-user-avatar" slot="icon" :src="Model.Avatar">
        <span class="my-user-nickname" slot="title">{{Model.NickName}}</span>
    </mt-cell>
</div>

<div class="my-form">
    <mt-field label="联系电话" placeholder="联系电话" type="tel" v-model="Model.Phone" :class="getValidClass(Model.Phone, 'isTel')"></mt-field>
    <mt-field label="验证码" placeholder="点击获取验证码" v-model="Model.Code" :class="getValidClass(Model.Code, 'isVerifyCode')">
        <mt-button @@click="sendSMS()" type="danger" :disabled="IsSending">{{SendText}}</mt-button>
    </mt-field>
</div>

<div class="my-submit">
    <mt-button type="danger" @@click="submit()">立即绑定</mt-button>
</div>

@section js{
    <script>
    function getVueOptions() {
        return helper.getVueModelOptions({
            data: {
                Time: 0,
                IsSending: false,
                SendText:"获取",
                Model: @Html.Raw(SerializationHelper.ToJson(Model))
            },
            methods: {
                getValidClass: function (value, cmd, myclass) {
                    var callback = helper[cmd] || function () { return true; };
                    myclass = myclass || "";
                    if (!helper.isNullOrEmpty(myclass)) {
                        myclass += " ";
                    }
                    myclass += (helper.isNullOrEmpty(value) || !callback(value)) ? "my-invalid-input" : "";
                    return myclass;
                },
                sendSMS: function () {
                    if (helper.isNullOrEmpty(this.Model.Phone)) {
                        helper.alert("请先填写联系电话。");
                        return;
                    }
                    if (!helper.isTel(this.Model.Phone)) {
                        helper.alert("请先填写合法的联系电话。");
                        return;
                    }

                    this.IsSending = true;
                    this.Time = 61;
                    this.setSendText();
                    helper.post("/Sms/SendCode/"+this.Model.Phone,null,function(data){
                        helper.alert("验证码已发送您手机，请注意查收。");
                    });
                },
                setSendText: function(){
                    this.Time--;
                    if(this.Time == 0){
                        this.IsSending = false;
                        this.SendText = "获取";
                        return;
                    }
                    this.SendText = this.Time + 'S';
                    setTimeout(this.setSendText, 1000);
                },
                submit: function () {
                    if (helper.isNullOrEmpty(this.Model.Phone)) {
                        helper.alert("请先填写联系电话。");
                        return;
                    }
                    if (!helper.isTel(this.Model.Phone)) {
                        helper.alert("请先填写合法的联系电话。");
                        return;
                    }
                    if (helper.isNullOrEmpty(this.Model.Code)) {
                        helper.alert("请先填验证码。");
                        return;
                    }
                    helper.post("/Mob/Member/Bind", this.Model, function (data) {
                        helper.redirect("/Mob");
                    });
                }
            }
        });
    }
    </script>
}